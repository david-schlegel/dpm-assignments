name = "Gender",
labels=c("Male", "Female", "Non-Binary")) +
scale_color_discrete(limits = c("male", "female", "nonbinary"),
name = "Gender", labels=c("Male", "Female", "Non-Binary")) +
labs(x = "Gender", y = "Mean Evaluation") +
theme_minimal()
splithistogram2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = custom_labels) +
scale_x_discrete(labels = c("Male", "Female", "Non-Binary")) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green") +
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green")) +
scale_x_discrete(labels = c("Male", "Female", "Non-Binary")) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
# Print the plot
print(splithistogram2)
# Print the plot
print(splithistogram2)
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green")) +
scale_x_discrete(labels = c("Male", "Female", "Non-Binary")) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
# Print the plot
print(splithistogram2)
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green")) +
scale_x_continuous(labels = c("Male", "Female", "Non-Binary")) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
# Print the plot
print(splithistogram2)
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green")) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
# Print the plot
print(splithistogram2)
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green")) +
scale_fill_discrete(labels = c("Male", "Female", "Non-Binary")) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
# Print the plot
print(splithistogram2)
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green")) +
scale_fill_discrete(labels = c("Male", "Female", "Non-Binary")) +
labs(fill = "Gender")  # We could also capitalize the header (title) of the legend
theme_minimal()
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green")) +
scale_fill_discrete(labels = c("Male", "Female", "Non-Binary")) +
labs(fill = "Gender") +  # We could also capitalize the header (title) of the legend
theme_minimal()
# Print the plot
print(splithistogram2)
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Nonbinary")) +
labs(fill = "Gender") +  # We could also capitalize the header (title) of the legend
theme_minimal()
# Print the plot
print(splithistogram2)
splithistogram2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme(legend.position = c(0.51, 0.8), legend.background = element_rect(fill = "white")) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +  # Ã„ndern der Beschriftungen hier
labs(fill = "Gender") +
theme_minimal()
# Print the plot
print(splithistogram2)
splithistogram2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
facet_grid(. ~ gender) +
theme_minimal() +
theme(legend.position = c(0.51, 0.8))
# Print the plot
print(splithistogram2)
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
#  facet_grid(. ~ gender) +
theme_minimal() +
theme(legend.position = c(0.51, 0.8))
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
facet_grid(. ~ gender) +
#  theme_minimal() +
theme(legend.position = c(0.51, 0.8))
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender))
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
facet_grid(. ~ gender) +
theme_minimal() +
theme(legend.position = c(0.51, 0.8))
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15, color = "black", alpha = 0.7) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
facet_grid(. ~ gender) +
theme_minimal() +
theme(legend.position = c(0.51, 0.8))
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
facet_grid(. ~ gender) +
theme_minimal() +
theme(legend.position = c(0.51, 0.8))
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
facet_grid(. ~ gender) +
theme_minimal() +
#  theme(legend.position = c(0.51, 0.8))
```
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
facet_grid(. ~ gender) +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_discrete(labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_discrete(labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_continuous(labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "Farbe1", "male" = "Farbe2", "nonbinary" = "Farbe3"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
View(data_processed_after_exclusions)
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("female" = "Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score) +
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
#  facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_bar(binwidth = 0.15, color = "black", alpha = 0.7) +
#  facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_bar(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, color = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, color = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_color_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, color = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_color_discrete(values = c("female" = "red", "male" = "blue", "nonbinary" = "green"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, color = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_color_discrete(
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, color = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_color_continuous(
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "Farbe1", "male" = "Farbe2", "nonbinary" = "Farbe3"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(binwidth = 0.15, color = "black", alpha = 0.7) +
facet_grid(. ~ gender) +
scale_fill_manual(values = c("female" = "red", "male" = "blue", "nonbinary" = "yellow"),
labels = c("Female", "Male", "Non-binary")) +
labs(x = "AMP score", y = "Mean self-reported evaluation", fill = "Gender") +
theme_minimal()
p2 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_jitter(alpha = 0.5) +
geom_magnify(shape = "rect",
from = c(xmin = 0.4, xmax = 0.6, ymin = 0.8, ymax = 1.3 ),
to = c(xmin = 0.75, xmax = 1, ymin = 4, ymax = 5.8 )) +
theme_minimal()
p2
data_processed_after_exclusions |>
correlation::cor(AMP_score, mean_evaluation)
data_processed_after_exclusions |>
cor(AMP_score, mean_evaluation)
data_processed_after_exclusions |>
cor(AMP_score, mean_evaluation)
?cor
?cor.test
data_processed_after_exclusions |>
cor.test(AMP_score, mean_evaluation)
data_processed_after_exclusions |>
cor.test(mean_evaluation, AMP_score)
data_processed_after_exclusions |>
cor.test(x mean_evaluation, AMP_score, method = "kendall")
data_processed_after_exclusions |>
cor.test(x mean_evaluation, AMP_score, method = "kendall")
data_processed_after_exclusions |>
cor.test(mean_evaluation, AMP_score, method = "kendall")
cor.test(data_processed_after_exclusions$AMP_score, data_processed_after_exclusions$mean_evaluation,
method = "pearson")
data_processed_after_exclusions |>
summarise(cor.test(AMP_score, mean_evaluation,
method = "pearson"))
data_processed_after_exclusions |>
summarise(pearson = cor.test(AMP_score, mean_evaluation,
method = "pearson"))
cor.test(data_processed_after_exclusions$AMP_score, data_processed_after_exclusions$mean_evaluation,
method = "pearson")
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
View(data_amp_raw)
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
View(dat_age_gender)
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
View(data_amp_performance_criteria)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
data_amp_score_congruence <- data_amp_raw |>
select(subject, evaluative_response = correct, trialcode, blockcode) |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(trialcode = case_when(trialcode == "prime_positive" ~ 1,
trialcode == "prime_negative" ~ 0,
TRUE ~ NA),
prime_congruence = ifelse(trialcode == evaluative_response, 1, 0))
# sanity check 1: if you consider all the combiantions of factor levels of trialcode, evaluative_response, and prime congruence, there should be only 4:
data_amp_score_congruence |>
count(trialcode, evaluative_response, prime_congruence)
data_amp_score_congruence |>
count(trialcode, evaluative_response, prime_congruence) |>
nrow() == 4
# calculate AMP score
data_amp_score <- data_amp_score_congruence |>
group_by(subject) |>
summarize(AMP_score = mean(prime_congruence, na.rm = TRUE)) |>
select(subject, AMP_score)
# sanity check 2: check if AMP_score is numeric
is.numeric(data_amp_score$AMP_score)
# sanity check 3: check if AMP_score is bounded [0,1]
data_amp_score |>
mutate(bounded_correctly = between(AMP_score, left = 0, right = 1)) |>
filter(bounded_correctly != TRUE) |>
nrow() == 0
