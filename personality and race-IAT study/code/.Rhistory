data %>%
rowwise() %>%
mutate(!!paste0("exclude_complete_scales_bfi_", scale_prefix) := {
vals = c_across(grep(paste0("^", scale_prefix, "(?!.*recode)"), names(data), perl = TRUE, value = TRUE))
num_non_na = sum(!is.na(vals))
if_else(num_non_na > 0 && num_non_na < threshold, "exclude", "include")
}) %>%
ungroup()
}
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_a", 9)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_c", 9)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_e", 8)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_o", 10)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_n", 8)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated"),
unique_id = case_when(!is.na(as.numeric(unique_id)) ~ as.character(unique_id),
TRUE ~ "other/missing/error")) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
# sanity check extroversion
cor_dat_bfi_e <- dat_bfi |>
select(bfi_e1, bfi_e2_recode, bfi_e3, bfi_e4, bfi_e5_recode, bfi_e6,
bfi_e7_recode, bfi_e8) |>
cor(use = "complete.obs")
all(cor_dat_bfi_e >= 0, na.rm = TRUE)
# sanity check conscientiousness
cor_dat_bfi_c <- dat_bfi |>
select(bfi_c1, bfi_c2_recode, bfi_c3, bfi_c4_recode, bfi_c5_recode,
bfi_c6, bfi_c7, bfi_c8, bfi_c9_recode) |>
cor(use = "complete.obs")
all(cor_dat_bfi_c >= 0, na.rm = TRUE)
# sanity check neuroticism
cor_dat_bfi_n <- dat_bfi |>
select(bfi_n1, bfi_n2_recode, bfi_n3, bfi_n4, bfi_n5_recode,
bfi_n6, bfi_n7_recode, bfi_n8) |>
cor(use = "complete.obs")
all(cor_dat_bfi_n >= 0, na.rm = TRUE)
# sanity check agreeableness
cor_dat_bfi_a <- dat_bfi |>
select(bfi_a1_recode, bfi_a2, bfi_a3_recode, bfi_a4, bfi_a5, bfi_a6_recode,
bfi_a7, bfi_a8_recode, bfi_a9) |>
cor(use = "complete.obs")
all(cor_dat_bfi_a >= 0, na.rm = TRUE)
# sanity check openness
cor_dat_bfi_o <- dat_bfi |>
select(bfi_o1, bfi_o2, bfi_o3, bfi_o4, bfi_o5, bfi_o6, bfi_o7_recode,
bfi_o8, bfi_o9_recode, bfi_o10) |>
cor(use = "complete.obs")
all(cor_dat_bfi_o >= 0, na.rm = TRUE)
# there is one negativ, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi <- dat_bfi |>
rowwise() |>
mutate(exclude_value_bfi = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
ungroup()
check_bfi_scale <- function(data, scale_prefix, threshold) {
data %>%
rowwise() %>%
mutate(!!paste0("exclude_complete_scales_bfi_", scale_prefix) := {
vals = c_across(grep(paste0("^", scale_prefix, "(?!.*recode)"), names(data), perl = TRUE, value = TRUE))
num_non_na = sum(!is.na(vals))
if_else(num_non_na > 0 && num_non_na < threshold, "exclude", "include")
}) %>%
ungroup()
}
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_a", 9)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_c", 9)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_e", 8)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_o", 10)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_n", 8)
check_bfi_scale <- function(data, scale_prefix, threshold) {
data %>%
rowwise() %>%
mutate(!!paste0("exclude_incomplete_scales_", scale_prefix) := {
vals = c_across(grep(paste0("^", scale_prefix, "(?!.*recode)"), names(data), perl = TRUE, value = TRUE))
num_non_na = sum(!is.na(vals))
if_else(num_non_na > 0 && num_non_na < threshold, "exclude", "include")
}) %>%
ungroup()
}
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_a", 9)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_c", 9)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_e", 8)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_o", 10)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_n", 8)
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks für jede BFI-Subskala
extroversion_check <- sanity_check_bfi_scale(dat_bfi, c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8"))
conscientiousness_check <- sanity_check_bfi_scale(dat_bfi, c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode"))
neuroticism_check <- sanity_check_bfi_scale(dat_bfi, c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8"))
agreeableness_check <- sanity_check_bfi_scale(dat_bfi, c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9"))
openness_check <- sanity_check_bfi_scale(dat_bfi, c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10"))
print(extroversion_check, conscientiousness_check)
# Sanity-Checks für jede BFI-Subskala
sanity_check_bfi_scale(dat_bfi, c("bfi_e1", "bfi_e2_recode",
"bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8"))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = mean(starts_with(bfi_a)))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = mean(across(starts_with(bfi_a))))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = mean(across(starts_with("bfi_a"))))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = mean(across(starts_with("bfi_a"))), na.rm = TRUE)
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = mean(across(starts_with("bfi_a")), na.rm = TRUE))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(., starts_with("bfi_a"), -matches("_recode")), na.rm = TRUE))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(., starts_with("bfi_a"), matches("_recode")), na.rm = TRUE))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(., starts_with("bfi_a"), -matches("_recode")), na.rm = TRUE))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(starts_with("bfi_a"), -matches("_recode")), na.rm = TRUE))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(., starts_with("bfi_a"), -matches("_recode")), na.rm = TRUE))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(., starts_with("bfi_a"), -matches("_recode")), na.rm = TRUE))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(dat_bfi, starts_with("bfi_a"), -matches("_recode")), na.rm = TRUE))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode",
"bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9"),
na.rm = TRUE))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(dat_bfi, c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode",
"bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")),
na.rm = TRUE))
"bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9"))
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(dat_bfi, c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode",
"bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9"))))
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated"),
unique_id = case_when(!is.na(as.numeric(unique_id)) ~ as.character(unique_id),
TRUE ~ "other/missing/error")) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks für jede BFI-Subskala
sanity_check_bfi_scale(dat_bfi, c("bfi_e1", "bfi_e2_recode",
"bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8"))
sanity_check_bfi_scale(dat_bfi, c("bfi_c1", "bfi_c2_recode",
"bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode"))
sanity_check_bfi_scale(dat_bfi, c("bfi_n1", "bfi_n2_recode", "bfi_n3",
"bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8"))
sanity_check_bfi_scale(dat_bfi, c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode",
"bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9"))
sanity_check_bfi_scale(dat_bfi, c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5",
"bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10"))
# there is one negativ in openness, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi <- dat_bfi |>
rowwise() |>
mutate(exclude_value_bfi = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
ungroup()
# Check if subscales are complete. It does not matter if i check the original or die original /recoded date.
# If the recoded is missing, it is because the original is missing to.
check_bfi_scale <- function(data, scale_prefix, threshold) {
data %>%
rowwise() %>%
mutate(!!paste0("exclude_incomplete_scales_", scale_prefix) := {
vals = c_across(grep(paste0("^", scale_prefix, "(?!.*recode)"), names(data), perl = TRUE, value = TRUE))
num_non_na = sum(!is.na(vals))
if_else(num_non_na > 0 && num_non_na < threshold, "exclude", "include")
}) %>%
ungroup()
}
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_a", 9)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_c", 9)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_e", 8)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_o", 10)
dat_bfi <- check_bfi_scale(dat_bfi, "bfi_n", 8)
dat_bfi <- dat_bfi |>
mutate(mean_bfi_a = rowMeans(select(dat_bfi, c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode",
"bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9"))))
# For mitigating copy & past errors build a vector with the used subscales original & recoded
bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sanity_check_bfi_scale(dat_bfi, bfi_a)
sub_bfi_c <- c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode")
sub_bfi_e <- c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8")
sub_bfi_n <- c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8")
sub_bfi_o <- c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10")
sanity_check_bfi_scale(dat_bfi, sub_bfi_o)
sanity_check_bfi_scale(dat_bfi, sub_bfi_n)
# Sanity-Checks für jede BFI-Subskala
sanity_check_bfi_scale(dat_bfi, sub_bfi_e)
sanity_check_bfi_scale(dat_bfi, sub_bfi_c)
sanity_check_bfi_scale(dat_bfi, sub_bfi_n)
sanity_check_bfi_scale(dat_bfi, sub_bfi_a)
# For mitigating copy & past errors build a vector with the used subscales original & recoded
sub_bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sanity_check_bfi_scale(dat_bfi, sub_bfi_a)
sanity_check_bfi_scale(dat_bfi, sub_bfi_o)
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks for everiy BFI subscale
sanity_check_bfi_scale(dat_bfi, sub_bfi_e)
sanity_check_bfi_scale(dat_bfi, sub_bfi_c)
sanity_check_bfi_scale(dat_bfi, sub_bfi_n)
sanity_check_bfi_scale(dat_bfi, sub_bfi_a)
sanity_check_bfi_scale(dat_bfi, sub_bfi_o)
# Check if subscales are complete.
check_bfi_scale <- function(data, scales, threshold) {
data %>%
rowwise() %>%
mutate(!!paste0("exclude_incomplete_scales_") := {
vals = c_across(all_of(scales))
num_non_na = sum(!is.na(vals))
if_else(num_non_na > 0 && num_non_na < threshold, "exclude", "include")
}) %>%
ungroup()
}
dat_bfi <- check_bfi_scale(dat_bfi, bif_a, 9)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_a, 9)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_a, 9)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_c, 9)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_e, 8)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_o, 10)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_n, 8)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated"),
unique_id = case_when(!is.na(as.numeric(unique_id)) ~ as.character(unique_id),
TRUE ~ "other/missing/error")) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
# For mitigating copy & past errors build a vector with the used subscales original & recoded
sub_bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sub_bfi_c <- c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode")
sub_bfi_e <- c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8")
sub_bfi_n <- c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8")
sub_bfi_o <- c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10")
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks for everiy BFI subscale
sanity_check_bfi_scale(dat_bfi, sub_bfi_e)
sanity_check_bfi_scale(dat_bfi, sub_bfi_c)
sanity_check_bfi_scale(dat_bfi, sub_bfi_n)
sanity_check_bfi_scale(dat_bfi, sub_bfi_a)
sanity_check_bfi_scale(dat_bfi, sub_bfi_o)
# there is one negativ in openness, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi <- dat_bfi |>
rowwise() |>
mutate(exclude_value_bfi = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
ungroup()
View(dat_bfi)
# Check if subscales are complete.
check_bfi_scale <- function(data, scales, threshold) {
data %>%
rowwise() %>%
mutate(!!paste0("exclude_incomplete_scales_") := {
vals = c_across(all_of(scales))
num_non_na = sum(!is.na(vals))
if_else(num_non_na > 0 && num_non_na < threshold, "exclude", "include")
}) %>%
ungroup()
}
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_a, 9)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_c, 9)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_e, 8)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_o, 10)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_n, 8)
# Check if subscales are complete.
check_bfi_scale <- function(data, scales, threshold) {
data %>%
rowwise() %>%
mutate(across(all_of(scales),
~ if_else(sum(!is.na(c_across(cur_column()))) > 0 &&
sum(!is.na(c_across(cur_column()))) < threshold,
"exclude", "include",
.names = "exclude_incomplete_{.col}"))) %>%
ungroup()
}
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_a, 9)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_e, 8)
# Check if subscales are complete.
check_bfi_scale <- function(data, columns, threshold) {
data %>%
rowwise() %>%
mutate(!!paste0("exclude_incomplete_scales_") := {
vals = c_across(all_of(columns))
num_non_na = sum(!is.na(vals))
if_else(num_non_na >= threshold, "include", "exclude")
}) %>%
ungroup()
}
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_a, 9)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated"),
unique_id = case_when(!is.na(as.numeric(unique_id)) ~ as.character(unique_id),
TRUE ~ "other/missing/error")) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
# For mitigating copy & past errors build a vector with the used subscales original & recoded
sub_bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sub_bfi_c <- c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode")
sub_bfi_e <- c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8")
sub_bfi_n <- c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8")
sub_bfi_o <- c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10")
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks for everiy BFI subscale
sanity_check_bfi_scale(dat_bfi, sub_bfi_e)
sanity_check_bfi_scale(dat_bfi, sub_bfi_c)
sanity_check_bfi_scale(dat_bfi, sub_bfi_n)
sanity_check_bfi_scale(dat_bfi, sub_bfi_a)
sanity_check_bfi_scale(dat_bfi, sub_bfi_o)
# there is one negativ in openness, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi <- dat_bfi |>
rowwise() |>
mutate(exclude_value_bfi = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
ungroup()
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_a, 9)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_c, 9)
check_bfi_scale <- function(data, columns, threshold) {
new_col_name <- paste0("exclude_incomplete_scales_", paste(columns, collapse = "_"))
data %>%
rowwise() %>%
mutate("{new_col_name}" := {
vals = c_across(all_of(columns))
num_non_na = sum(!is.na(vals))
if_else(num_non_na >= threshold, "include", "exclude")
}) %>%
ungroup()
}
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_a, 9)
dat_bfi <- check_bfi_scale(dat_bfi, sub_bfi_c, 9)
