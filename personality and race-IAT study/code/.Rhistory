library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv", skip = 1) |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated")) |>
filter(unique_id != is.na(unique_id)) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
# For mitigating copy & past errors build a vector with the used subscales original & recoded
sub_bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sub_bfi_c <- c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode")
sub_bfi_e <- c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8")
sub_bfi_n <- c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8")
sub_bfi_o <- c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10")
dat_bif_recoded <- dat_bfi |>
select(unique_id, all_of(c(sub_bfi_a, sub_bfi_c, sub_bfi_e, sub_bfi_o, sub_bfi_n)))
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks for everiy BFI subscale
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_a)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_c)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_e)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_o)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_n)
# there is one negativ in openness, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi_scores_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_min_max_scores = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
select(unique_id, exclude_min_max_scores)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv", skip = 1) |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated")) |>
filter(unique_id != is.na(unique_id)) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
# For mitigating copy & past errors build a vector with the used subscales original & recoded
sub_bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sub_bfi_c <- c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode")
sub_bfi_e <- c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8")
sub_bfi_n <- c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8")
sub_bfi_o <- c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10")
dat_bif_recoded <- dat_bfi |>
select(unique_id, all_of(c(sub_bfi_a, sub_bfi_c, sub_bfi_e, sub_bfi_o, sub_bfi_n)))
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks for everiy BFI subscale
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_a)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_c)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_e)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_o)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_n)
# there is one negativ in openness, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi_scores_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_min_max_scores = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
select(unique_id, exclude_min_max_scores)
check_bfi_scale <- function(data, columns, threshold, col_name) {
data %>%
mutate(!!rlang::sym(col_name) := {
vals <- purrr::pmap(list(!!!rlang::syms(columns)), ~c(...))
purrr::map_chr(vals, function(x) {
if (all(is.na(x))) {
"include"
} else {
num_non_na <- sum(!is.na(x))
if (num_non_na >= threshold) {
"include"
} else {
"exclude"
}
}
})
})
}
dat_bfi_participant_completeness <- dat_bif_recoded |>
check_bfi_scale(sub_bfi_a, 9, "exclude_sub_bfi_agreeablenes") |>
check_bfi_scale(sub_bfi_c, 9, "exclude_sub_bfi_conscientiousness") |>
check_bfi_scale(sub_bfi_e, 8, "exclude_sub_bfi_extraversion") |>
check_bfi_scale(sub_bfi_o, 10, "exclude_sub_bfi_openness") |>
check_bfi_scale(sub_bfi_n, 8, "exclude_sub_bfi_neuroticism") |>
select(unique_id, c(starts_with("exclude")))
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv", skip = 1) |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated")) |>
filter(unique_id != is.na(unique_id)) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
# For mitigating copy & past errors build a vector with the used subscales original & recoded
sub_bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sub_bfi_c <- c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode")
sub_bfi_e <- c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8")
sub_bfi_n <- c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8")
sub_bfi_o <- c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10")
dat_bif_recoded <- dat_bfi |>
select(unique_id, all_of(c(sub_bfi_a, sub_bfi_c, sub_bfi_e, sub_bfi_o, sub_bfi_n)))
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks for everiy BFI subscale
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_a)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_c)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_e)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_o)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_n)
# there is one negativ in openness, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi_scores_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_min_max_scores = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
select(unique_id, exclude_min_max_scores)
# Extraversion
dat_bfi_participant_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_sub_bfi_extraversion = ifelse(all(!is.na(c_across(contains("sub_bfi_e")))), "include", "exclude")) |>
filter(exclude_sub_bfi_extraversion != "exclude")
# Conscientiousness
dat_bfi_participant_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_sub_bfi_conscientiousness = ifelse(all(!is.na(c_across(contains("sub_bfi_c")))), "include", "exclude")) |>
filter(exclude_sub_bfi_conscientiousness != "exclude")
# Neuroticism
dat_bfi_participant_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_sub_bfi_neuroticism = ifelse(all(!is.na(c_across(contains("sub_bfi_n")))), "include", "exclude")) |>
filter(exclude_sub_bfi_neuroticism != "exclude")
# Agreeableness
dat_bfi_participant_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_sub_bfi_agreeablenes = ifelse(all(!is.na(c_across(contains("sub_bfi_a")))), "include", "exclude")) |>
filter(exclude_sub_bfi_agreeablenes != "exclude")
# Openness
dat_bfi_participant_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_sub_bfi_openness = ifelse(all(!is.na(c_across(contains("sub_bfi_o")))), "include", "exclude")) |>
filter(exclude_sub_bfi_openness != "exclude")
View(dat_bfi_participant_completeness)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv", skip = 1) |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated")) |>
filter(unique_id != is.na(unique_id)) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
# For mitigating copy & past errors build a vector with the used subscales original & recoded
sub_bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sub_bfi_c <- c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode")
sub_bfi_e <- c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8")
sub_bfi_n <- c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8")
sub_bfi_o <- c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10")
dat_bif_recoded <- dat_bfi |>
select(unique_id, all_of(c(sub_bfi_a, sub_bfi_c, sub_bfi_e, sub_bfi_o, sub_bfi_n)))
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks for everiy BFI subscale
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_a)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_c)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_e)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_o)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_n)
# there is one negativ in openness, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi_scores_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_min_max_scores = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
select(unique_id, exclude_min_max_scores)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv", skip = 1) |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated")) |>
filter(unique_id != is.na(unique_id)) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
# For mitigating copy & past errors build a vector with the used subscales original & recoded
sub_bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sub_bfi_c <- c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode")
sub_bfi_e <- c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8")
sub_bfi_n <- c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8")
sub_bfi_o <- c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10")
dat_bif_recoded <- dat_bfi |>
select(unique_id, all_of(c(sub_bfi_a, sub_bfi_c, sub_bfi_e, sub_bfi_o, sub_bfi_n)))
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks for everiy BFI subscale
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_a)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_c)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_e)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_o)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_n)
# there is one negativ in openness, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi_scores_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_min_max_scores = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
select(unique_id, exclude_min_max_scores)
check_bfi_scale <- function(data, columns, threshold, col_name) {
data %>%
mutate(!!rlang::sym(col_name) := {
vals <- purrr::pmap(list(!!!rlang::syms(columns)), ~c(...))
purrr::map_chr(vals, function(x) {
if (all(is.na(x))) {
"include"
} else {
num_non_na <- sum(!is.na(x))
if (num_non_na >= threshold) {
"include"
} else {
"exclude"
}
}
})
})
}
dat_bfi_participant_completeness <- dat_bif_recoded |>
check_bfi_scale(sub_bfi_a, 9, "exclude_sub_bfi_agreeablenes")
View(dat_bfi_participant_completeness)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# big-5 Index
data_bfi_raw <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
# Implicit association test
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv", skip = 1) |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(gender = sex,
gender = case_when(gender == "f" ~ "female",
gender == "m" ~ "male",
TRUE ~ "not indicated"),
age = as.character(age),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "not indicated")) |>
filter(unique_id != is.na(unique_id)) |>
select(-sex)
# Function to recode negatively worded items
reverse_score <- function(x) {
case_when(
x == 1 ~ 6,
x == 2 ~ 5,
x == 3 ~ 4,
x == 4 ~ 3,
x == 5 ~ 2,
x == 6 ~ 1,
x == 0 ~ 0, # Question: why are there 0?
TRUE ~ NA_real_
)
}
dat_bfi <- data_bfi_raw |>
mutate(across(c(bfi_e2, bfi_e5, bfi_e7, bfi_c2, bfi_c4, bfi_c5, bfi_c9, bfi_n2, bfi_n5,
bfi_n7, bfi_a1, bfi_a3, bfi_a6, bfi_a8, bfi_o7, bfi_o9), ~ reverse_score(.),
.names = "{.col}_recode"))
# For mitigating copy & past errors build a vector with the used subscales original & recoded
sub_bfi_a <- c("bfi_a1_recode", "bfi_a2", "bfi_a3_recode", "bfi_a4", "bfi_a5", "bfi_a6_recode", "bfi_a7", "bfi_a8_recode", "bfi_a9")
sub_bfi_c <- c("bfi_c1", "bfi_c2_recode", "bfi_c3", "bfi_c4_recode", "bfi_c5_recode", "bfi_c6", "bfi_c7", "bfi_c8", "bfi_c9_recode")
sub_bfi_e <- c("bfi_e1", "bfi_e2_recode", "bfi_e3", "bfi_e4", "bfi_e5_recode", "bfi_e6", "bfi_e7_recode", "bfi_e8")
sub_bfi_n <- c("bfi_n1", "bfi_n2_recode", "bfi_n3", "bfi_n4", "bfi_n5_recode", "bfi_n6", "bfi_n7_recode", "bfi_n8")
sub_bfi_o <- c("bfi_o1", "bfi_o2", "bfi_o3", "bfi_o4", "bfi_o5", "bfi_o6", "bfi_o7_recode", "bfi_o8", "bfi_o9_recode", "bfi_o10")
dat_bif_recoded <- dat_bfi |>
select(unique_id, all_of(c(sub_bfi_a, sub_bfi_c, sub_bfi_e, sub_bfi_o, sub_bfi_n)))
sanity_check_bfi_scale <- function(data, scale_columns) {
cor_data <- data %>%
select(all_of(scale_columns)) %>%
cor(use = "complete.obs")
all(cor_data >= 0, na.rm = TRUE)
}
# Sanity-Checks for everiy BFI subscale
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_a)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_c)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_e)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_o)
sanity_check_bfi_scale(dat_bif_recoded, sub_bfi_n)
# there is one negativ in openness, but it is close to zero and only between o7 and o10. Decision, still correct.
dat_bfi_scores_completeness <- dat_bif_recoded |>
rowwise() |>
mutate(exclude_min_max_scores = if_else(any((c_across(starts_with("bfi")) < 1 |
c_across(starts_with("bfi")) > 6),
na.rm = TRUE), "exclude", "include")) |>
select(unique_id, exclude_min_max_scores)
check_bfi_scale <- function(data, columns, col_name) {
data %>%
mutate(!!rlang::sym(col_name) := {
vals <- purrr::pmap(list(!!!rlang::syms(columns)), ~c(...))
purrr::map_chr(vals, function(x) {
if (all(is.na(x))) {
"include"
} else if (all(!is.na(x))) {
"include"
} else {
"exclude"
}
})
})
}
dat_bfi_participant_completeness <- dat_bif_recoded |>
check_bfi_scale(sub_bfi_a, "exclude_sub_bfi_agreeablenes")
View(dat_bfi_participant_completeness)
